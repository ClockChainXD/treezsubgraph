// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class bidAddedToSale extends ethereum.Event {
  get params(): bidAddedToSale__Params {
    return new bidAddedToSale__Params(this);
  }
}

export class bidAddedToSale__Params {
  _event: bidAddedToSale;

  constructor(event: bidAddedToSale) {
    this._event = event;
  }

  get bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get saleID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class itemAddedToSales extends ethereum.Event {
  get params(): itemAddedToSales__Params {
    return new itemAddedToSales__Params(this);
  }
}

export class itemAddedToSales__Params {
  _event: itemAddedToSales;

  constructor(event: itemAddedToSales) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get saleID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get askingPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get auctionable(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class itemSold extends ethereum.Event {
  get params(): itemSold__Params {
    return new itemSold__Params(this);
  }
}

export class itemSold__Params {
  _event: itemSold;

  constructor(event: itemSold) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get saleID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class avaxTreezNftMarket__itemsForSaleResultWinningBidStruct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get isActive(): boolean {
    return this[1].toBoolean();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }
}

export class avaxTreezNftMarket__itemsForSaleResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: boolean;
  value6: avaxTreezNftMarket__itemsForSaleResultWinningBidStruct;
  value7: boolean;
  value8: Address;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: boolean,
    value6: avaxTreezNftMarket__itemsForSaleResultWinningBidStruct,
    value7: boolean,
    value8: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromTuple(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromAddress(this.value8));
    return map;
  }
}

export class avaxTreezNftMarket extends ethereum.SmartContract {
  static bind(address: Address): avaxTreezNftMarket {
    return new avaxTreezNftMarket("avaxTreezNftMarket", address);
  }

  acceptedPayments(param0: BigInt): Address {
    let result = super.call(
      "acceptedPayments",
      "acceptedPayments(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_acceptedPayments(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "acceptedPayments",
      "acceptedPayments(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  acceptedTokens(param0: Address): boolean {
    let result = super.call(
      "acceptedTokens",
      "acceptedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_acceptedTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "acceptedTokens",
      "acceptedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isActiveOnSale(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "isActiveOnSale",
      "isActiveOnSale(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_isActiveOnSale(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isActiveOnSale",
      "isActiveOnSale(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isActivepaymentMethod(param0: Address): boolean {
    let result = super.call(
      "isActivepaymentMethod",
      "isActivepaymentMethod(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isActivepaymentMethod(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isActivepaymentMethod",
      "isActivepaymentMethod(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isExcludedFromFees(param0: Address): boolean {
    let result = super.call(
      "isExcludedFromFees",
      "isExcludedFromFees(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isExcludedFromFees(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isExcludedFromFees",
      "isExcludedFromFees(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  itemsForSale(param0: BigInt): avaxTreezNftMarket__itemsForSaleResult {
    let result = super.call(
      "itemsForSale",
      "itemsForSale(uint256):(uint256,address,uint256,address,uint256,bool,(address,bool,uint256),bool,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new avaxTreezNftMarket__itemsForSaleResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toTuple() as avaxTreezNftMarket__itemsForSaleResultWinningBidStruct,
      result[7].toBoolean(),
      result[8].toAddress()
    );
  }

  try_itemsForSale(
    param0: BigInt
  ): ethereum.CallResult<avaxTreezNftMarket__itemsForSaleResult> {
    let result = super.tryCall(
      "itemsForSale",
      "itemsForSale(uint256):(uint256,address,uint256,address,uint256,bool,(address,bool,uint256),bool,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new avaxTreezNftMarket__itemsForSaleResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toTuple() as avaxTreezNftMarket__itemsForSaleResultWinningBidStruct,
        value[7].toBoolean(),
        value[8].toAddress()
      )
    );
  }

  itemsForSaleList(param0: BigInt): BigInt {
    let result = super.call(
      "itemsForSaleList",
      "itemsForSaleList(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_itemsForSaleList(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "itemsForSaleList",
      "itemsForSaleList(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  itemsForSaleIds(): Array<BigInt> {
    let result = super.call(
      "itemsForSaleIds",
      "itemsForSaleIds():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_itemsForSaleIds(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "itemsForSaleIds",
      "itemsForSaleIds():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  addItemToSale(
    _tokenAddress: Address,
    _tokenID: BigInt,
    _askingPrice: BigInt,
    _acceptedPayment: Address,
    _auctionable: boolean
  ): BigInt {
    let result = super.call(
      "addItemToSale",
      "addItemToSale(address,uint256,uint256,address,bool):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenID),
        ethereum.Value.fromUnsignedBigInt(_askingPrice),
        ethereum.Value.fromAddress(_acceptedPayment),
        ethereum.Value.fromBoolean(_auctionable)
      ]
    );

    return result[0].toBigInt();
  }

  try_addItemToSale(
    _tokenAddress: Address,
    _tokenID: BigInt,
    _askingPrice: BigInt,
    _acceptedPayment: Address,
    _auctionable: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addItemToSale",
      "addItemToSale(address,uint256,uint256,address,bool):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenID),
        ethereum.Value.fromUnsignedBigInt(_askingPrice),
        ethereum.Value.fromAddress(_acceptedPayment),
        ethereum.Value.fromBoolean(_auctionable)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AddItemToSaleCall extends ethereum.Call {
  get inputs(): AddItemToSaleCall__Inputs {
    return new AddItemToSaleCall__Inputs(this);
  }

  get outputs(): AddItemToSaleCall__Outputs {
    return new AddItemToSaleCall__Outputs(this);
  }
}

export class AddItemToSaleCall__Inputs {
  _call: AddItemToSaleCall;

  constructor(call: AddItemToSaleCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _askingPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _acceptedPayment(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _auctionable(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class AddItemToSaleCall__Outputs {
  _call: AddItemToSaleCall;

  constructor(call: AddItemToSaleCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BuyItemCall extends ethereum.Call {
  get inputs(): BuyItemCall__Inputs {
    return new BuyItemCall__Inputs(this);
  }

  get outputs(): BuyItemCall__Outputs {
    return new BuyItemCall__Outputs(this);
  }
}

export class BuyItemCall__Inputs {
  _call: BuyItemCall;

  constructor(call: BuyItemCall) {
    this._call = call;
  }

  get saleID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyItemCall__Outputs {
  _call: BuyItemCall;

  constructor(call: BuyItemCall) {
    this._call = call;
  }
}

export class PlaceBIDCall extends ethereum.Call {
  get inputs(): PlaceBIDCall__Inputs {
    return new PlaceBIDCall__Inputs(this);
  }

  get outputs(): PlaceBIDCall__Outputs {
    return new PlaceBIDCall__Outputs(this);
  }
}

export class PlaceBIDCall__Inputs {
  _call: PlaceBIDCall;

  constructor(call: PlaceBIDCall) {
    this._call = call;
  }

  get saleID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PlaceBIDCall__Outputs {
  _call: PlaceBIDCall;

  constructor(call: PlaceBIDCall) {
    this._call = call;
  }
}

export class WithdrawBidCall extends ethereum.Call {
  get inputs(): WithdrawBidCall__Inputs {
    return new WithdrawBidCall__Inputs(this);
  }

  get outputs(): WithdrawBidCall__Outputs {
    return new WithdrawBidCall__Outputs(this);
  }
}

export class WithdrawBidCall__Inputs {
  _call: WithdrawBidCall;

  constructor(call: WithdrawBidCall) {
    this._call = call;
  }

  get saleID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawBidCall__Outputs {
  _call: WithdrawBidCall;

  constructor(call: WithdrawBidCall) {
    this._call = call;
  }
}

export class AcceptWinningBidCall extends ethereum.Call {
  get inputs(): AcceptWinningBidCall__Inputs {
    return new AcceptWinningBidCall__Inputs(this);
  }

  get outputs(): AcceptWinningBidCall__Outputs {
    return new AcceptWinningBidCall__Outputs(this);
  }
}

export class AcceptWinningBidCall__Inputs {
  _call: AcceptWinningBidCall;

  constructor(call: AcceptWinningBidCall) {
    this._call = call;
  }

  get saleID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AcceptWinningBidCall__Outputs {
  _call: AcceptWinningBidCall;

  constructor(call: AcceptWinningBidCall) {
    this._call = call;
  }
}

export class CancelSalesCall extends ethereum.Call {
  get inputs(): CancelSalesCall__Inputs {
    return new CancelSalesCall__Inputs(this);
  }

  get outputs(): CancelSalesCall__Outputs {
    return new CancelSalesCall__Outputs(this);
  }
}

export class CancelSalesCall__Inputs {
  _call: CancelSalesCall;

  constructor(call: CancelSalesCall) {
    this._call = call;
  }

  get saleID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelSalesCall__Outputs {
  _call: CancelSalesCall;

  constructor(call: CancelSalesCall) {
    this._call = call;
  }
}

export class NftTokenStatusUpdateCall extends ethereum.Call {
  get inputs(): NftTokenStatusUpdateCall__Inputs {
    return new NftTokenStatusUpdateCall__Inputs(this);
  }

  get outputs(): NftTokenStatusUpdateCall__Outputs {
    return new NftTokenStatusUpdateCall__Outputs(this);
  }
}

export class NftTokenStatusUpdateCall__Inputs {
  _call: NftTokenStatusUpdateCall;

  constructor(call: NftTokenStatusUpdateCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get Nftstatus(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class NftTokenStatusUpdateCall__Outputs {
  _call: NftTokenStatusUpdateCall;

  constructor(call: NftTokenStatusUpdateCall) {
    this._call = call;
  }
}

export class AddPaymentMethodCall extends ethereum.Call {
  get inputs(): AddPaymentMethodCall__Inputs {
    return new AddPaymentMethodCall__Inputs(this);
  }

  get outputs(): AddPaymentMethodCall__Outputs {
    return new AddPaymentMethodCall__Outputs(this);
  }
}

export class AddPaymentMethodCall__Inputs {
  _call: AddPaymentMethodCall;

  constructor(call: AddPaymentMethodCall) {
    this._call = call;
  }

  get paymentAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddPaymentMethodCall__Outputs {
  _call: AddPaymentMethodCall;

  constructor(call: AddPaymentMethodCall) {
    this._call = call;
  }
}

export class ActivatePaymentMethodCall extends ethereum.Call {
  get inputs(): ActivatePaymentMethodCall__Inputs {
    return new ActivatePaymentMethodCall__Inputs(this);
  }

  get outputs(): ActivatePaymentMethodCall__Outputs {
    return new ActivatePaymentMethodCall__Outputs(this);
  }
}

export class ActivatePaymentMethodCall__Inputs {
  _call: ActivatePaymentMethodCall;

  constructor(call: ActivatePaymentMethodCall) {
    this._call = call;
  }

  get paymentAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ActivatePaymentMethodCall__Outputs {
  _call: ActivatePaymentMethodCall;

  constructor(call: ActivatePaymentMethodCall) {
    this._call = call;
  }
}

export class DeactivatePaymentMethodCall extends ethereum.Call {
  get inputs(): DeactivatePaymentMethodCall__Inputs {
    return new DeactivatePaymentMethodCall__Inputs(this);
  }

  get outputs(): DeactivatePaymentMethodCall__Outputs {
    return new DeactivatePaymentMethodCall__Outputs(this);
  }
}

export class DeactivatePaymentMethodCall__Inputs {
  _call: DeactivatePaymentMethodCall;

  constructor(call: DeactivatePaymentMethodCall) {
    this._call = call;
  }

  get paymentAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeactivatePaymentMethodCall__Outputs {
  _call: DeactivatePaymentMethodCall;

  constructor(call: DeactivatePaymentMethodCall) {
    this._call = call;
  }
}

export class FeeRemitanceAddressUpdateCall extends ethereum.Call {
  get inputs(): FeeRemitanceAddressUpdateCall__Inputs {
    return new FeeRemitanceAddressUpdateCall__Inputs(this);
  }

  get outputs(): FeeRemitanceAddressUpdateCall__Outputs {
    return new FeeRemitanceAddressUpdateCall__Outputs(this);
  }
}

export class FeeRemitanceAddressUpdateCall__Inputs {
  _call: FeeRemitanceAddressUpdateCall;

  constructor(call: FeeRemitanceAddressUpdateCall) {
    this._call = call;
  }

  get _feeRemitanceAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class FeeRemitanceAddressUpdateCall__Outputs {
  _call: FeeRemitanceAddressUpdateCall;

  constructor(call: FeeRemitanceAddressUpdateCall) {
    this._call = call;
  }
}

export class SettingsCall extends ethereum.Call {
  get inputs(): SettingsCall__Inputs {
    return new SettingsCall__Inputs(this);
  }

  get outputs(): SettingsCall__Outputs {
    return new SettingsCall__Outputs(this);
  }
}

export class SettingsCall__Inputs {
  _call: SettingsCall;

  constructor(call: SettingsCall) {
    this._call = call;
  }

  get activeMinimumsState(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get canWithdrawBidState(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SettingsCall__Outputs {
  _call: SettingsCall;

  constructor(call: SettingsCall) {
    this._call = call;
  }
}

export class SetPaymentMethodFeesCall extends ethereum.Call {
  get inputs(): SetPaymentMethodFeesCall__Inputs {
    return new SetPaymentMethodFeesCall__Inputs(this);
  }

  get outputs(): SetPaymentMethodFeesCall__Outputs {
    return new SetPaymentMethodFeesCall__Outputs(this);
  }
}

export class SetPaymentMethodFeesCall__Inputs {
  _call: SetPaymentMethodFeesCall;

  constructor(call: SetPaymentMethodFeesCall) {
    this._call = call;
  }

  get _paymentMethod(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _fees(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPaymentMethodFeesCall__Outputs {
  _call: SetPaymentMethodFeesCall;

  constructor(call: SetPaymentMethodFeesCall) {
    this._call = call;
  }
}

export class Ex_in_Clude_FromFeeCall extends ethereum.Call {
  get inputs(): Ex_in_Clude_FromFeeCall__Inputs {
    return new Ex_in_Clude_FromFeeCall__Inputs(this);
  }

  get outputs(): Ex_in_Clude_FromFeeCall__Outputs {
    return new Ex_in_Clude_FromFeeCall__Outputs(this);
  }
}

export class Ex_in_Clude_FromFeeCall__Inputs {
  _call: Ex_in_Clude_FromFeeCall;

  constructor(call: Ex_in_Clude_FromFeeCall) {
    this._call = call;
  }

  get _seller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class Ex_in_Clude_FromFeeCall__Outputs {
  _call: Ex_in_Clude_FromFeeCall;

  constructor(call: Ex_in_Clude_FromFeeCall) {
    this._call = call;
  }
}
